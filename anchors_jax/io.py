import json
from typing import List, Mapping, Tuple

import jax.numpy as np

import anchors_jax as aj
from anchors_jax.typing import Boxes, Tensor

LabelMap = Mapping[str, int]
LabelMeAnnot = Tuple[Boxes, Tensor, LabelMap]


def load_labelme_annot(annot_path: str, 
                       normalize_boxes: bool = True) -> Tuple[Boxes, Tensor]:
    """
    Reads an annotation file generated by labelme

    Parameters
    ----------
    annot_path: str
        Path to the annotation file
    normalize_boxes: bool, default True
        Whether or not normalize the boxes between 0 and 1 according to the image
        size

    Returns
    -------
    LabelMeAnnot
        Tuple containing:
            - The boxes in a Tensor of shape [N, 4], where N is the
              number of boxes.
            - The labels encoded in an integer Tensor of shape [N]. 
            - Label mapping (Mapping[str, int]): mapping to convert labels to 
              integers and viceversa
    """
    annot = json.load(open(annot_path))

    labels = [o['label'] for o in annot['shapes']]
    class_2_idx = _get_label_mapping(labels)
    labels_idx = np.array([class_2_idx[o] for o in labels])

    boxes = [sum(o['points'], []) for o in annot['shapes']]
    boxes = np.array(boxes).astype('float32')

    if normalize_boxes:
        h = annot['imageHeight']
        w = annot['imageWidth']

        boxes = aj.boxes.normalize_boxes(boxes, (h, w))

    return boxes, labels_idx, class_2_idx


def _get_label_mapping(labels: List[str]) -> Mapping[str, int]:
    classes = sorted(list(set(labels)))
    return {c: i for i, c in enumerate(classes, start=1)}
